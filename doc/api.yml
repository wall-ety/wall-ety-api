openapi: 3.0.3
info:
  version: 1.0.0
  title: wallety-api
paths:
  /ping:
    get:
      tags:
        - Health
      summary: Pong
      operationId: ping
      responses:
        '200':
          description: Pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /dummy-table:
    get:
      tags:
        - Health
      summary: Get all dummies
      operationId: getDummies
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dummy'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /categories:
    get:
      tags:
        - Categories
      summary: Get All Categories
      operationId: getAllCategories
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Categories
      summary: Create or Update list of Categories
      operationId: crupdateCategories
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: The category that was crupdated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /categories/{idCategory}:
    put:
      tags:
        - Categories
      summary: Create or Update list of Categories
      parameters:
        - in: path
          name: idCategory
          description: If tf category to retrieve
          required: true
          schema:
            type: string
            format: uuid
      operationId: crupdateCategories
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: The category that was crupdated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /clients:
    get:
      tags:
        - Clients
      summary: Get all clients
      operationId: getAllClients
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Clients
      summary: Create or Update list of Clients
      operationId: crupdateClients
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Client'
      responses:
        '200':
          description: The list of clients which was crupdated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /clients/{idClient}:
    get:
      tags:
        - Clients
      summary: Get one Client using id
      operationId: getClientById
      parameters:
        - $ref: "#/components/parameters/ClientIdParam"
      responses:
        '200':
          description: One client which has the specified id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /accounts:
    get:
      tags:
        - Accounts
      summary: Get all Account
      operationId: getAllAccounts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Accounts
      summary: Create or Update list of Accounts
      operationId: crupdateAccounts
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateAccount'
      responses:
        '200':
          description: The list of account that was crupdated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /accounts/{accountId}:
    get:
      tags:
        - Accounts
      summary: Get one Account using id
      operationId: getAccountById
      parameters:
        - $ref: "#/components/parameters/AccountIdParam"
      responses:
        '200':
          description: One account which has the specified id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /banks:
    get:
      tags:
        - Banks
      summary: Get All Banks
      operationId: getAllBanks
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bank'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Banks
      summary: create or update list of Banks
      operationId: crupdateBanks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Bank'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bank'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /banks/{idBank}:
    get:
      tags:
        - Banks
      summary: Get one Bank by id
      operationId: getBanksById
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bank'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /accounts/{accountId}/balances/current:
    get:
      tags:
        - Balances
      summary: Get Current Balance for an Account
      operationId: getCurrentBalance
      parameters:
        - $ref: "#/components/parameters/AccountIdParam"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /accounts/{accountId}/balances:
    get:
      tags:
        - Balances
      summary: Get All Balance by AccountId
      operationId: getBalancesByAccountId
      parameters:
        - $ref: "#/components/parameters/AccountIdParam"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Balance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /accounts/{accountId}/transactions:
    get:
      tags:
        - Transactions
      summary: Get all Transactions by account id
      operationId: getTransactionsByAccountId
      parameters:
        - $ref: "#/components/parameters/AccountIdParam"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /transactions:
    post:
      tags:
        - Transactions
      summary: create list of Transaction
      operationId: createTransactions
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateTransaction'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateTransaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /accounts/{accountId}/transfers:
    get:
      tags:
        - Transfers
      summary: Get account's Transfer
      operationId: getTransfersByAccountId
      parameters:
        - $ref: "#/components/parameters/AccountIdParam"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transfer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /transfers:
    put:
      tags:
        - Transfers
      summary: create or update list of Transfers
      operationId: crupdateTransfers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateTransfer'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transfer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  parameters:
    ClientIdParam:
      in: path
      name: idClient
      description: id of the client
      required: true
      schema:
        type: string
        format: uuid
    AccountIdParam:
      in: path
      name: accountId
      description: Id of the account
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    Client:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          example: 2024-03-20T14:30:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2024-03-20T14:30:00Z
        lastName:
          type: string
        firstName:
          type: string
        birthdate:
          type: string
          format: date-time
          example: 2024-03-20T14:30:00Z
        monthSalary:
          type: number
    CategoryType:
      type: string
      enum:
        - ALL
        - DEBIT
        - CREDIT
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
          example: 2024-03-20T14:30:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2024-03-20T14:30:00Z
        type:
          $ref: "#/components/schemas/CategoryType"
    Balance:
      type: object
      properties:
        id:
          type: string
          format: uuid
        amount:
          type: number
        createdAt:
          type: string
          format: date-time
          example: 2024-03-20T14:30:00Z
    Bank:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: BMOI
        updatedAt:
          type: string
          format: date-time
          example: 2024-03-20T14:30:00Z
        createdAt:
          type: string
          format: date-time
          example: 2024-03-20T14:30:00Z
        authorizeCredits:
          type: boolean
        firstWeekLoan:
          type: number
        subsequentLoan:
          type: number
    AccountBase:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
        updateAt:
          type: string
        authorizeCredits:
          type: string
    CompleteAccount:
      type: object
      allOf:
        - $ref: "#/components/schemas/AccountBase"
      properties:
        ref:
          type: string
    CreateAccount:
      type: object
      allOf:
        - $ref: "#/components/schemas/AccountBase"
      properties:
        idClient:
          type: string
          format: uuid
        idBank:
          type: string
          format: uuid
    Account:
      type: object
      allOf:
        - $ref: "#/components/schemas/CompleteAccount"
      properties:
        bank:
          $ref: "#/components/schemas/Bank"
        balance:
          $ref: "#/components/schemas/Balance"
        client:
          $ref: "#/components/schemas/Client"
    TransferStatus:
      type: string
      enum:
        - PENDING
        - COMPLETED
        - CANCELLED
    TransferBase:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          example: 2024-03-20T14:30:00Z
        effectiveDate:
          type: string
          format: date-time
          example: 2024-03-20T14:30:00Z
        reason:
          type: string
        status:
          $ref: "#/components/schemas/TransferStatus"
        label:
          type: string
    CreateTransfer:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransferBase"
      properties:
        sourceId:
          type: string
          format: uuid
        destinationId:
          type: string
          format: uuid
    Transfer:
      type: object
      allOf:
        - $ref: "#/components/schemas/CreateTransfer"
      properties:
        source:
          $ref: "#/components/schemas/Client"
        destination:
          $ref: "#/components/schemas/Client"
    TransactionType:
      type: string
      enum:
        - DEBIT
        - CREDIT
    TransactionBase:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: "#/components/schemas/TransactionType"
        reason:
          type: string
        amount:
          type: number
        transactionDatetime:
          type: string
        label:
          type: string
    CreateTransaction:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionBase"
      properties:
        idAccount:
          type: string
    Transaction:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionBase"
      properties:
        account:
          $ref: "#/components/schemas/Account"
    Dummy:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
  responses:
    ApiErrorResponse:
      description: Api Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              code:
                type: number
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/responses/ApiErrorResponse"
          example:
            message: "Bad Request"
            code: 400
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/responses/ApiErrorResponse"
          example:
            message: "Forbidden"
            code: 403
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/responses/ApiErrorResponse"
          example:
            message: "Not Found"
            code: 404
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/responses/ApiErrorResponse"
          example:
            message: "Internal Server Error"
            code: 500
